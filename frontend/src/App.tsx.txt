import React, { useState, useEffect } from 'react'
import axios from 'axios'

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api'

const api = axios.create({
  baseURL: API_URL,
  timeout: 10000,
})

// Add auth token to requests
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('auth_token')
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

interface User {
  id: string
  email: string
  firstName: string
  lastName: string
  role: string
}

interface Client {
  id: string
  firstName: string
  lastName: string
  email?: string
  phone?: string
  role: string
  stage: string
  city?: string
  state?: string
  tags: string[]
  lifetimeGrossCommission?: number
  lifetimeNetCommission?: number
  transactions?: Transaction[]
}

interface Transaction {
  id: string
  type: string
  propertyAddress: string
  status: string
  price?: number
  grossCommission?: number
  netCommissionToMe?: number
  closeDate?: string
}

function App() {
  const [user, setUser] = useState<User | null>(null)
  const [clients, setClients] = useState<Client[]>([])
  const [selectedClient, setSelectedClient] = useState<Client | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')

  // Check for existing auth
  useEffect(() => {
    const token = localStorage.getItem('auth_token')
    if (token) {
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`
      fetchClients()
    } else {
      setLoading(false)
    }
  }, [])

  const login = async (email: string, password: string) => {
    try {
      const response = await api.post('/auth/login', { email, password })
      const { token, user: userData } = response.data
      
      localStorage.setItem('auth_token', token)
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`
      setUser(userData)
      fetchClients()
      setError('')
    } catch (err: any) {
      setError(err.response?.data?.error || 'Login failed')
    }
  }

  const logout = () => {
    localStorage.removeItem('auth_token')
    delete api.defaults.headers.common['Authorization']
    setUser(null)
    setClients([])
    setSelectedClient(null)
  }

  const fetchClients = async () => {
    try {
      setLoading(true)
      const response = await api.get('/clients')
      setClients(response.data.clients)
      if (!user) {
        // If we successfully fetched clients, we must be logged in
        setUser({ id: '1', email: 'rodrigo@realtor.com', firstName: 'Rodrigo', lastName: 'Martinez', role: 'admin' })
      }
    } catch (error) {
      console.error('Failed to fetch clients:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchClientDetails = async (clientId: string) => {
    try {
      const response = await api.get(`/clients/${clientId}`)
      setSelectedClient(response.data.client)
    } catch (error) {
      console.error('Failed to fetch client details:', error)
    }
  }

  const formatCurrency = (amount?: number) => {
    if (!amount) return '$0'
    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount)
  }

  const getInitials = (firstName: string, lastName: string) => {
    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase()
  }

  const getStatusColor = (stage: string) => {
    const colors = {
      NEW: 'bg-blue-500',
      NURTURE: 'bg-yellow-500',
      SHOWING: 'bg-purple-500',
      ACTIVE: 'bg-green-500',
      CLOSED: 'bg-gray-500',
    }
    return colors[stage as keyof typeof colors] || 'bg-gray-500'
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-white"></div>
      </div>
    )
  }

  if (!user) {
    return <LoginForm onLogin={login} error={error} />
  }

  if (selectedClient) {
    return <ClientDetail client={selectedClient} onBack={() => setSelectedClient(null)} />
  }

  return <ClientList clients={clients} user={user} onLogout={logout} onSelectClient={fetchClientDetails} />
}

// Login Component
const LoginForm: React.FC<{ onLogin: (email: string, password: string) => void, error: string }> = ({ onLogin, error }) => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onLogin(email, password)
  }

  return (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center">
      <div className="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-md">
        <h2 className="text-2xl font-bold text-white mb-6 text-center">Real Estate CRM</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full p-3 bg-gray-700 text-white rounded-md border border-gray-600 focus:border-blue-500 focus:outline-none"
            required
          />
          <input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full p-3 bg-gray-700 text-white rounded-md border border-gray-600 focus:border-blue-500 focus:outline-none"
            required
          />
          {error && (
            <div className="bg-red-900 border border-red-600 text-red-200 px-4 py-3 rounded">
              {error}
            </div>
          )}
          <button
            type="submit"
            className="w-full bg-blue-600 text-white p-3 rounded-md hover:bg-blue-700 transition-colors"
          >
            Sign In
          </button>
        </form>
        <div className="mt-6 p-4 bg-gray-700 rounded-lg">
          <h3 className="text-sm font-medium text-gray-200 mb-2">Demo Account</h3>
          <div className="text-xs text-gray-400 space-y-1">
            <div>Email: rodrigo@realtor.com</div>
            <div>Password: admin123</div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Client List Component
const ClientList: React.FC<{
  clients: Client[]
  user: User
  onLogout: () => void
  onSelectClient: (id: string) => void
}> = ({ clients, user, onLogout, onSelectClient }) => {
  return (
    <div className="min-h-screen bg-gray-900">
      {/* Header */}
      <header className="bg-gray-800 border-b border-gray-700 p-4">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold text-white">Real Estate CRM</h1>
          <div className="flex items-center space-x-4">
            <span className="text-gray-300">Welcome, {user.firstName}!</span>
            <button
              onClick={onLogout}
              className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="p-6">
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-white mb-4">Your Clients ({clients.length})</h2>
          
          {clients.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-gray-400 mb-4">No clients yet. Let's create some sample data!</div>
              <button
                onClick={async () => {
                  try {
                    await api.post('/seed')
                    window.location.reload()
                  } catch (error) {
                    console.error('Failed to seed data:', error)
                  }
                }}
                className="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors"
              >
                Create Sample Data
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {clients.map((client) => (
                <div
                  key={client.id}
                  onClick={() => onSelectClient(client.id)}
                  className="bg-gray-800 rounded-lg p-6 cursor-pointer hover:bg-gray-750 transition-colors border border-gray-700"
                >
                  {/* Avatar */}
                  <div className="flex items-center mb-4">
                    <div className="w-12 h-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full flex items-center justify-center mr-3">
                      <span className="text-white font-bold">{getInitials(client.firstName, client.lastName)}</span>
                    </div>
                    <div className="flex-1">
                      <h3 className="text-white font-medium">{client.firstName} {client.lastName}</h3>
                      <p className="text-gray-400 text-sm">{client.role}</p>
                    </div>
                  </div>

                  {/* Status */}
                  <div className="mb-3">
                    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium text-white ${getStatusColor(client.stage)}`}>
                      {client.stage}
                    </span>
                  </div>

                  {/* Contact Info */}
                  <div className="text-gray-300 text-sm space-y-1 mb-3">
                    {client.email && <div>üìß {client.email}</div>}
                    {client.phone && <div>üìû {client.phone}</div>}
                    {client.city && client.state && <div>üìç {client.city}, {client.state}</div>}
                  </div>

                  {/* Commission */}
                  {client.lifetimeNetCommission && client.lifetimeNetCommission > 0 && (
                    <div className="text-green-400 font-medium text-sm">
                      üí∞ {formatCurrency(client.lifetimeNetCommission)} earned
                    </div>
                  )}

                  {/* Tags */}
                  {client.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1 mt-2">
                      {client.tags.slice(0, 2).map((tag, index) => (
                        <span key={index} className="bg-gray-700 text-gray-300 px-2 py-1 rounded text-xs">
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </main>
    </div>
  )
}

// Client Detail Component
const ClientDetail: React.FC<{ client: Client, onBack: () => void }> = ({ client, onBack }) => {
  const formatCurrency = (amount?: number) => {
    if (!amount) return '$0'
    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount)
  }

  const formatDate = (date?: string) => {
    if (!date) return 'N/A'
    return new Date(date).toLocaleDateString()
  }

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Header */}
      <header className="bg-gray-800 border-b border-gray-700 p-4">
        <div className="flex items-center space-x-4">
          <button
            onClick={onBack}
            className="text-gray-300 hover:text-white transition-colors"
          >
            ‚Üê Back to Clients
          </button>
          <h1 className="text-2xl font-bold text-white">
            {client.firstName} {client.lastName}
          </h1>
        </div>
      </header>

      {/* Content */}
      <main className="p-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Client Info */}
          <div className="lg:col-span-2">
            <div className="bg-gray-800 rounded-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-white mb-4">Client Information</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-gray-300">
                <div><strong>Email:</strong> {client.email || 'Not provided'}</div>
                <div><strong>Phone:</strong> {client.phone || 'Not provided'}</div>
                <div><strong>Role:</strong> {client.role}</div>
                <div><strong>Stage:</strong> {client.stage}</div>
                <div><strong>Location:</strong> {client.city && client.state ? `${client.city}, ${client.state}` : 'Not provided'}</div>
                <div><strong>Tags:</strong> {client.tags.join(', ') || 'None'}</div>
              </div>
            </div>

            {/* Transactions */}
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold text-white mb-4">Transaction History</h2>
              {client.transactions && client.transactions.length > 0 ? (
                <div className="space-y-4">
                  {client.transactions.map((transaction) => (
                    <div key={transaction.id} className="bg-gray-700 rounded-lg p-4">
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <h3 className="text-white font-medium">{transaction.propertyAddress}</h3>
                          <p className="text-gray-400 text-sm">{transaction.type} ‚Ä¢ {transaction.status}</p>
                        </div>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          transaction.status === 'CLOSED' ? 'bg-green-600 text-white' : 'bg-yellow-600 text-white'
                        }`}>
                          {transaction.status}
                        </span>
                      </div>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-300">
                        <div>
                          <span className="text-gray-400">Price:</span>
                          <p className="text-white">{formatCurrency(transaction.price)}</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Gross Commission:</span>
                          <p className="text-green-400">{formatCurrency(transaction.grossCommission)}</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Net to Me:</span>
                          <p className="text-green-400">{formatCurrency(transaction.netCommissionToMe)}</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Close Date:</span>
                          <p className="text-white">{formatDate(transaction.closeDate)}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-400">
                  No transactions yet
                </div>
              )}
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Commission Summary */}
            <div className="bg-gray-800 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-white mb-4">Commission Summary</h3>
              <div className="space-y-3">
                <div>
                  <p className="text-gray-400 text-sm">Lifetime Gross</p>
                  <p className="text-2xl font-bold text-green-400">
                    {formatCurrency(client.lifetimeGrossCommission)}
                  </p>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Lifetime Net</p>
                  <p className="text-2xl font-bold text-green-400">
                    {formatCurrency(client.lifetimeNetCommission)}
                  </p>
                </div>
              </div>
            </div>

            {/* Quick