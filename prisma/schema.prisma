generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      String   @default("agent")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients      Client[]
  transactions Transaction[]
  reminders    Reminder[]
  emails       Email[]

  @@map("users")
}

model Client {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  birthday        DateTime?
  anniversary     DateTime?
  occupation      String?
  spouse          String?
  children        String?
  notes           String?
  preferredContact String   @default("email") // email, phone, text
  leadSource      String?
  referredBy      String?
  tags            String[]
  avatar          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  agentId      String
  agent        User          @relation(fields: [agentId], references: [id])
  transactions Transaction[]
  properties   Property[]
  calls        Call[]
  todos        Todo[]
  activities   Activity[]
  reminders    Reminder[]
  emails       Email[]

  @@map("clients")
}

model Transaction {
  id               String    @id @default(cuid())
  type             String    // "buy", "sell", "lease"
  status           String    // "pending", "closed", "cancelled"
  propertyAddress  String
  salePrice        Decimal?
  listPrice        Decimal?
  commissionRate   Decimal?  // Percentage (e.g., 3.0 for 3%)
  grossCommission  Decimal?
  netCommission    Decimal?  // After splits/fees
  splitPercentage  Decimal?  // Agent's split percentage
  brokerageFee     Decimal?
  closeDate        DateTime?
  listDate         DateTime?
  contractDate     DateTime?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  clientId String
  client   Client @relation(fields: [clientId], references: [id])
  agentId  String
  agent    User   @relation(fields: [agentId], references: [id])

  @@map("transactions")
}

model Property {
  id          String    @id @default(cuid())
  address     String
  city        String?
  state       String?
  zipCode     String?
  price       Decimal?
  type        String    // "Single Family", "Condo", "Townhouse", etc.
  bedrooms    Int?
  bathrooms   Decimal?
  sqft        Int?
  lotSize     Decimal?
  yearBuilt   Int?
  mls         String?
  description String?
  features    String[]
  images      String[]
  status      String    @default("active") // "active", "sold", "pending"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  @@map("properties")
}

model Call {
  id          String   @id @default(cuid())
  phoneNumber String
  duration    Int?     // in seconds
  notes       String?
  outcome     String?  // "answered", "voicemail", "no-answer", "busy"
  followUp    Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  @@map("calls")
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    String   @default("medium") // "high", "medium", "low"
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  @@map("todos")
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // "call", "email", "meeting", "property_shown", "contract_signed", etc.
  title       String
  description String
  createdAt   DateTime @default(now())

  // Relations
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  @@map("activities")
}

model Reminder {
  id          String    @id @default(cuid())
  title       String
  description String?
  reminderDate DateTime
  type        String    // "birthday", "anniversary", "follow_up", "closing", "custom"
  completed   Boolean   @default(false)
  recurring   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  clientId String
  client   Client @relation(fields: [clientId], references: [id])
  agentId  String
  agent    User   @relation(fields: [agentId], references: [id])

  @@map("reminders")
}

model Email {
  id        String   @id @default(cuid())
  subject   String
  body      String
  to        String[]
  cc        String[]
  bcc       String[]
  status    String   @default("draft") // "draft", "sent", "failed"
  sentAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])
  agentId  String
  agent    User    @relation(fields: [agentId], references: [id])

  @@map("emails")
}